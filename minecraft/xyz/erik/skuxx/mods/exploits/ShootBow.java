package xyz.erik.skuxx.mods.exploits;

import net.minecraft.item.Item;
import net.minecraft.item.ItemBow;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C09PacketHeldItemChange;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import xyz.erik.api.helpers.ErikTimer;
import xyz.erik.api.mod.Mod;
import xyz.erik.skuxx.Skuxx;
import xyz.erik.skuxx.event.Event;
import xyz.erik.skuxx.event.EventTarget;
import xyz.erik.skuxx.event.events.EventMotion;
import xyz.erik.skuxx.mods.Category;

public class ShootBow
extends Mod
{

    public ShootBow() {

        setCategory(Category.EXPLOITS);
    }


    private ErikTimer erikTimer = new ErikTimer();
    @EventTarget
    private void onMotionUpdate(EventMotion e) {
        if (e.getMotion() == Event.Motion.AFTER) {
            if (getPlayer().isUsingItem() && getPlayer().getHeldItem() != null && getPlayer().onGround && getPlayer().getHeldItem().getItem() != null && getPlayer().getHeldItem().getItem() instanceof ItemBow)
            {
                if (erikTimer.delay(220)) {
                    if (!Skuxx.getInstance().getModManager().getMod("BowAim").getState())
                    getPlayer().sendPacket(new C03PacketPlayer());
                    getPlayer().sendPacket(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM,BlockPos.ORIGIN,EnumFacing.DOWN));
                    getPlayer().stopUsingItem();
                    erikTimer.reset();
                }
            }
        }
    }



    private void send20Packet(boolean ground) {
        getPlayer().sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(getPlayer().posX,getPlayer().posY,getPlayer().posZ,getPlayer().rotationYaw,getPlayer().rotationPitch,true));
        for(int i = 20; i > 0; i--) {
            if (ground) {
                getPlayer().sendQueue.addToSendQueue(new C03PacketPlayer());
            } else {
                getPlayer().sendQueue.addToSendQueue(new C03PacketPlayer(ground));
            }
        }
    }



    public int getBow() {
        for(int i = 0; i < 36; i++) {
            if (getPlayer().inventory.mainInventory[i] != null) {
                ItemStack is = getPlayer().inventory.mainInventory[i];
                Item item = is.getItem();
                if (Item.getIdFromItem(item) == 261) {
                    return i;
                }
            }
        }
        return -1;
    }
/*     boolean isUsingItem =  getBow() != -1 && getMinecraft().gameSettings.keyBindUseItem.getIsKeyPressed();
            if (isUsingItem && getPlayer().onGround) {

                int bowId = getBow();
                ItemStack is = getPlayer().inventory.mainInventory[bowId];
                this.getMinecraft().thePlayer.setItemInUse(is, 71999);
                if (getPlayer().inventory.currentItem == bowId) {

                    getPlayerController().sendUseItem(getPlayer(),getWorld(),getPlayer().getHeldItem());
                    send20Packet(true);
                } else if (bowId < 9) {
                    getPlayer().sendQueue.addToSendQueue(new C09PacketHeldItemChange(bowId));
                    getPlayerController().sendUseItem(getPlayer(),getWorld(),is);

                    send20Packet(true);
                    getPlayer().sendQueue.addToSendQueue(new C09PacketHeldItemChange(getPlayer().inventory.currentItem));
                } else {
                    send20Packet(true);
                    getPlayer().swap(bowId ,8);
                    getPlayer().sendQueue.addToSendQueue(new C09PacketHeldItemChange(8));
                    getPlayerController().sendUseItem(getPlayer(),getWorld(),is);
                    getPlayer().sendQueue.addToSendQueue(new C09PacketHeldItemChange(getPlayer().inventory.currentItem));
                }
                this.getMinecraft().playerController.onStoppedUsingItem(this.getPlayer());
                    e.setCancelled(true);
                }
        */
}
