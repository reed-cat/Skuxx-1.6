package xyz.erik.skuxx.mods.exploits;

import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.potion.Potion;
import xyz.erik.api.config.vals.Bool;
import xyz.erik.api.helpers.ErikTimer;
import xyz.erik.api.helpers.Helper;
import xyz.erik.api.helpers.Location;
import xyz.erik.api.mod.Mod;
import xyz.erik.skuxx.Skuxx;
import xyz.erik.skuxx.event.Event;
import xyz.erik.skuxx.event.EventTarget;
import xyz.erik.skuxx.event.events.EventMotion;
import xyz.erik.skuxx.event.events.OnJump;
import xyz.erik.skuxx.mods.Category;
import xyz.erik.skuxx.mods.combat.Criticals;

import java.util.Random;

public class pSilent
extends Mod{

    private EntityLivingBase target;
    private Bool block = new Bool("Block",false);
    private Bool dura = new Bool("Durability",false);
    private boolean nextJump;
    public pSilent() {
        setCategory(Category.EXPLOITS);
        addSet(block);
        addSet(dura);
    }
    @EventTarget
    private void onJump(OnJump e) {
        if (!next && jump) {
            e.setCancelled(true);
            nextJump = true;
            this.jump = false;
        }
    }

    private ErikTimer timer = new ErikTimer();
    private boolean jump,jumpNext;
    @EventTarget
    private void onMotion(EventMotion e) {
        if (nextJump && !jump) {
            getPlayer().jump();
            nextJump = false;
        }
      //  timer = new ErikTimer();
        if (e.getMotion() == Event.Motion.BEFORE) {
            this.psuedoTarget = null;
            this.target = getTarget();
            boolean sBlock = false;
            for (Object o : this.getWorld().loadedEntityList) {
                if (o instanceof EntityPlayer) {
                    EntityPlayer ent = (EntityPlayer) o;
                    if (ent != getPlayer()
                            && ent.getDistanceToEntity(getPlayer()) < 4 && ent.isEntityAlive()) {
                        sBlock = this.target == null;
                        break;
                    }
                }
            }
            if (getPlayer().isBlocking() || ((getPlayer().isUsingSword() && block.isState()) && sBlock)) {
                getPlayerController().sendUseItem(getPlayer(), getWorld(), getPlayer().getHeldItem());
            }

            if (timer.delay(500) && psuedoTarget != null &&Skuxx.getInstance().getModManager().getMod("Criticals").getState()) {
                jump = true;
                if (getPlayer().onGround && next) {
                    double crit = 0.068;
                    e.setY(e.getY() + crit);
                    e.setGround(false);
                    e.setSend(true);
                } else if (getPlayer().onGround) {
                    e.setGround(false);
                    e.setSend(true);
                }
                if (getPlayer().fallDistance > 0.0F && getPlayer().fallDistance < 0.69F) {
                    e.setGround(true);
                }
                Skuxx.getInstance().getModManager().getMod("Criticals").setRunning(1);
            }



            if (target != null) {
                float[] rotations = Helper.getRotationsAtLocation(Location.HEAD, target);
                e.setRotationYaw(rotations[0]);
                e.setRotationPitch(rotations[1]);
            }
            next = (!next);
        } else if (e.getMotion() == Event.Motion.AFTER) {
            if (target != null && next) {
                boolean wasSprinting = getPlayer().isSprinting();

                if (dura.isState()) {
                    getPlayer().swap(9,getPlayer().inventory.currentItem);
                    Criticals.setCancel(true);
                    attack(target);
                    Criticals.setCancel(true);
                    getPlayer().swap(9,getPlayer().inventory.currentItem);
                    Criticals.setCancel(true);
                    attack(target);
                } else {
                    Criticals.setCancel(true);
                    attack(target);
                }
                if (wasSprinting) {
                    getPlayer().setSprinting(true);
                }
                getPlayer().sendPacket(new C03PacketPlayer.C05PacketPlayerLook(getPlayer().rotationYaw,getPlayer().rotationPitch,getPlayer().onGround));

                timer.reset();
            }
        }
    }
    private void attack(EntityLivingBase target) {
        getPlayer().swingItem();
        getPlayer().sendQueue.addToSendQueue(new C02PacketUseEntity(target,C02PacketUseEntity.Action.ATTACK));

    }

    public EntityLivingBase getTarget() {

        for(Object o : this.getWorld().loadedEntityList) {
            if (o instanceof EntityPlayer) {

                EntityLivingBase tempEntity = (EntityLivingBase)o;
                if (checEntity(tempEntity)) {
                    return tempEntity;
                }
            }

        }
        return null;

    }

    private boolean next;
    private EntityPlayer psuedoTarget;


    private boolean checEntity(EntityLivingBase temp) {
        if (temp == null || temp == getPlayer()) {
            return false;
        }
        if (temp.getDistanceToEntity(getPlayer()) > 4) {
            return false;
        }
        if (!timer.delay(527))
        {
            return false;
        } else if(timer.delay(500)) {
            psuedoTarget = (EntityPlayer) temp;
        }
        if (temp instanceof EntityPlayer && Skuxx.getInstance().getFriendManager().isFriend(temp.getName())) {
            return false;
        }
        return true;
    }


}
